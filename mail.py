from flask import render_template, current_app
from flask_mail import Mail, Message
from database import get_user_email


def send_email(recipient: str, subject: str, html: str):
    """
    Send mail using flask-mail. Sender will be the one specified in app.config
    :param recipient: email address to send email to
    :param subject: Subject string of email
    :param html: rendered template of email html
    :return: True if successful
    :return: False if an Exception was raised
    """
    mail = Mail(current_app)
    recipients = [recipient]
    msg = Message(recipients=recipients, subject=subject, html=html)
    try:
        mail.send(msg)
    except Exception as e:
        print(e)
        return False
    return True


def send_user_email(username: str, subject: str, html: str):
    """
    Send an email to a given user
    :param username: username of user to send email to
    :param subject: Subject string of email
    :param html: rendered template of email html
    :return: True if successful
    :return: False if unsuccessful
    """
    email = get_user_email(username)
    if not email:
        return False
    if not send_email(email, subject, html):
        return False
    return True


def html_confirmation_email(confirmation_link: str):
    """
    render template for email to confirm email address
    :param confirmation_link: link with token created by itsdangerous
    :return: rendered email html for email confirmation
    """
    return render_template("emails/confirm_email.html", confirmation_link=confirmation_link)


def html_change_mail_email(confirm_new_email_link: str):
    """
    render template for email to change email
    :param confirm_new_email_link: link with token generated by itsdangerous
    :return: rendered email html for change email confirmation email
    """
    return render_template("emails/confirm_new_email.html", confirm_new_email_link=confirm_new_email_link)


def html_reset_password_mail(password_reset_link: str):
    """
    Render template for email to reset password
    :param password_reset_link: link with token generated by itsdangerous
    :return: rendered email html for reset password email
    """
    return render_template("emails/password_reset_email.html", password_reset_link=password_reset_link)


def html_friend_request_mail(username: str):
    """
    render template for email to notify that username sent a friend request to recipient
    :param username: username of user that sent the friend request
    :return: rendered email html for friend request notification
    """
    return render_template("emails/friend_request_email.html", username=username)


def html_accepted_friend_mail(username: str):
    """
    Render html to notify that the user with the given username accepted a friend request sent by the recipient
    :param username: Username of user who accepted the friend request
    :return: rendered emeil html for accepted friend request notification
    """
    return render_template("emails/accepted_friend_email.html", username=username)


def html_new_question_mail(username: str):
    """
    Render template email notification that the recipient was asked a new question
    :param username: Username of user who asked the question
    :return: rendered email html for new question notification
    """
    return render_template("emails/new_question_email.html", username=username)


def html_question_answered(username: str):
    """
    Render template for notification that a question the user asked was answered
    :param username: Username of user who answered the question
    :return: rendered html for question answered notification
    """
    return render_template("emails/question_answered_email.html", username=username)
